 
use crate::parser::Parser;
use miette::{IntoDiagnostic, Result, SourceCode};
mod lexer;
mod parser;

fn main() -> Result<()> {
    let args: Vec<String> = std::env::args().collect();
    if args.len() != 2 {
        eprintln!("Usage: {} <filename>", args[0]);
        std::process::exit(1);
    }

    let input = std::fs::read_to_string(&args[1]).into_diagnostic()?;
    let mut parser = Parser::new(&input);
    let start = std::time::Instant::now();
    let (result, errors) = parser.parse_program();
    let duration = start.elapsed();
    println!("Result: {:#?}", result);
    println!("Parsing took: {:?}", duration);

    for e in &errors {
        eprintln!(
            "{:?}",
            miette::Report::new(e.clone()).with_source_code(input.to_string())
        )
    }
    if !errors.is_empty() {
        std::process::exit(1)
    }

    Ok(())
}
